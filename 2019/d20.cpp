#include <set>
#include <unordered_set>

#include "common.h"

// clang-format off

const VS main_input = {
    "                                           S         C   O       U         Z     R                                             ",
    "                                           M         O   U       K         W     O                                             ",
    "  #########################################.#########.###.#######.#########.#####.###########################################  ",
    "  #.#...#...#.....#.#.#...#.............#...#.#.....#...#...#...........#.#.....#...........#...#.#...#.#.#...#.#...#...#.#.#  ",
    "  #.###.###.#.#.###.#.###.###########.#.###.#.#.#######.###.###########.#.###.#.#######.#.#.###.#.#.###.#.#.###.#.###.###.#.#  ",
    "  #...#.#.#...#.#.........#...#.#...#.#.......#.....#...#.#.#.#...#.........#.#.#.......#.#.......................#.........#  ",
    "  #.###.#.#####.###.#####.###.#.###.#####.#####.#####.###.#.#.###.#.#.#.#.#####.#.###.#####.#.###.#.###.#.#####.#####.#####.#  ",
    "  #.#.#.#...............#.......................#.#...#.#.....#...#.#.#.#.#.....#...#.#...#.#...#.#...#.#.#.#.#.#.......#.#.#  ",
    "  #.#.#.#########.#.#.#####.#.#.#######.#######.#.#.#.#.###.#####.#.#.#####.###.#.#####.#####.#.###.#.###.#.#.###.#####.#.###  ",
    "  #.#.#.#.....#.#.#.#.#.#...#.#.#...#.....#...#...#.#.....#.....#...#...#.#.#.#.#.........#.#.#.#...#.#...#...#.#.#...#.#.#.#  ",
    "  #.#.#.###.###.#######.#####.###.###.#######.#.#######.###.#.###.#.#.###.###.#.###.#.#.###.#.###.#.#.#####.###.#.#.#####.#.#  ",
    "  #.#...#.......#.........#.....#.#.#...#.#.#.....#.......#.#...#.#.#...#.........#.#.#...#.#...#.#.#.#...#...........#...#.#  ",
    "  #.#.#####.#############.#######.#.#####.#.###.###.###########.#.#.#.#.#.#####.###.###.###.#####.#.#####.#.###.###.###.###.#  ",
    "  #.......#...#.......#...........................#.....#.#...#.#.#.#.#.#...#.....#.#...........#.#...#.#...#.#.#.#...#.....#  ",
    "  #####.###.###.###.###.###.#.###.#####.#.#.###########.#.#.#.#.#.#######.#.#####.#.###.#####.#########.###.#.###.#####.#####  ",
    "  #...#.....#.#.#.#.#.#.#.#.#.#.#.#.#...#.#.#...#.........#.#.#.#.#.#.....#.#.#.#.#.#.......#.................#.#.#.....#...#  ",
    "  ###.###.###.###.#.#.###.#####.###.#####.###.#.###.#########.#.#.#.#####.###.#.#######.#######.###.#.###.#.#.#.#.###.#####.#  ",
    "  #.#.#.......#.................#.#.#.........#.#.......#.......#...#...............#...#.....#.#.#.#.#.#.#.#...#.....#.#...#  ",
    "  #.#.###.###.#.#.#.###.###.###.#.#.#####.#.###.###.#.#########.#.#######.#.#.#.#######.#.#######.###.#.#######.#####.#.###.#  ",
    "  #...#.#.#.#.#.#.#...#...#.#.#...........#.#.#.#...#.#.....#.#.#...#.#...#.#.#.#.#.................#.......#.#...#.....#...#  ",
    "  ###.#.#.#.#.#####.#.#######.#.#.###.###.###.#.###.#####.#.###.#.###.#####.###.#.#####.###.#######.#.#######.#########.#.###  ",
    "  #.........#...#.#.#.#.......#.#.#...#...#.#.....#.....#.#...#.#.#.....#...#.#.#.....#...#.......#.#...#.......#.#...#.....#  ",
    "  ###.###.#######.#####.#####.#.#.#######.#.###.#.#.###.#.#.###.#.###.###.###.###.###.#.#.###############.###.###.###.###.###  ",
    "  #.#...#.#.......#.#.#.#...#...#...#.....#.#...#.#.#.#.#.#.#...#.......#.......#.#.#...#...#.#.........#.#.#.....#.........#  ",
    "  #.#####.#####.###.#.#####.#.###########.#.###.###.#.#.#.#.#.#.#.#####.#######.###.#.#####.#.###.#######.#.#############.###  ",
    "  #.#.#.#...#.....#...#.......#...#.#.#.#.#.......#...#.#.#...#.#.#.......#.......#.#...#.#.#.#.#.#...#.....#.#.#.#.#.#.....#  ",
    "  #.#.#.#.###.#.###.###.###.#.###.#.#.#.###.#.#####.#.###.#.#.###.###.#########.###.#.###.###.#.#.###.#.#####.#.#.#.#.###.###  ",
    "  #...#...#.#.#.#.....#.#.#.#.#.......#.....#...#...#...#.#.#.#...#.......#.#.#.#...#.............#.#.#...#...#.#...........#  ",
    "  #.#.#.###.###.###.#####.#########.###.###.###.#.#.#####.#############.###.#.#.#.#.#.###.#.#.#.###.#.#.#####.#.#.#.#.#.###.#  ",
    "  #.#...#...#.#...#...#...#...#.#.....#.#.#.#...#.#.#.#.#.......#.#.#...#.......#.#...#.#.#.#.#.#.#.............#.#.#.#.#...#  ",
    "  #####.#.###.#.###.#####.###.#.#.#.###.#.###.###.###.#.#####.###.#.#.#####.#.###.#####.#.###.###.#.###########.#########.###  ",
    "  #.#.#.#.#.#.....#.#.#.#.#...#...#.#.#.#.......#.......#.#...#.....#...#...#...#.....#.#.#.#.#.#.....#...#.#.#.#.#.#.#.#...#  ",
    "  #.#.#.#.#.#.#####.#.#.#.###.#####.#.#####.#.#.#####.###.###.###.#.#.#######.###.###.#.###.#.#.###.###.###.#.###.#.#.#.#.#.#  ",
    "  #.......#.#.....#...........#.#.#.......#.#.#.#.....#...#.#...#.#...#.....#...#...#.......#...#.................#.......#.#  ",
    "  #######.#.#.#####.###.#####.#.#.###.###.#####.#.#####.###.###.#.#########.#.#########.###.#######.###.#.#.###############.#  ",
    "  #.....#.....#...#.#.#...#.....#...#.#.........#.....#.........#.........#.......#.......#.#.#.......#.#.#...#...#...#.....#  ",
    "  ###.###.#######.###.#######.#.#.#######.#########.#######.###########.###.#########.#######.#####.###########.#.#.###.#.#.#  ",
    "  #.#.#.......#.#.#.#.#...#.#.#.#...#    H         G       U           O   O         Z    #.#...#.......#.....#.#...#.#.#.#.#  ",
    "  #.#.###.#.###.#.#.#.###.#.###.###.#    Y         M       K           H   U         W    #.###.#.#########.#######.#.#####.#  ",
    "  #.......#.#.#.....#.#.......#.....#                                                     #.#.......#.#.#.#.#...............#  ",
    "  #.#.#######.#####.#.#####.#.#.###.#                                                     #.###.#.###.#.#.#.#####.#########.#  ",
    "TV..#...#...#.#.#.......#...#.....#..AO                                                   #.#...#...#.#.#...#.#.#...#.....#.#  ",
    "  ###.#####.#.#.#####.#####.#######.#                                                     #.###.#.###.#.#.###.#.###.#######.#  ",
    "ZZ....#.#...#.#...#.......#.....#...#                                                     #...#.#.........#.#.#.#.#...#.....#  ",
    "  #.###.#.#.#.#.###.###.#.###.#####.#                                                     #.#.#.#####.###.#.#.#.###.#.#.#####  ",
    "  #.......#...........#.#.......#.#.#                                                   FA..#.....#.#.#.#...........#.#......DI",
    "  #####################.#.#.#.###.###                                                     ###.#####.###.#############.#######  ",
    "  #.....#.............#.#.#.#.#.#...#                                                     #...#...............#...#.#.#......AO",
    "  #.#.###.#.###.#.###.#####.###.#.#.#                                                     #####.#####.#.###.#.#.#.#.###.#####  ",
    "LU..#.....#.#...#.#.#...#.#.#.....#.#                                                   DR......#.....#.#.#.#...#.#...#.....#  ",
    "  #####.#.#####.###.#.###.#####.###.#                                                     #.#.#####.#####.#######.#.#.#####.#  ",
    "  #.#.#.#.....#.#...........#.....#..ZA                                                   #.#.#.......#...........#.#.......#  ",
    "  #.#.###.#####.#####.#####.#.#.#.#.#                                                     #######.#######.#.#.#####.###.#.#.#  ",
    "  #...#.#...#.#.....#.#.......#.#.#.#                                                     #.#...#...#.....#.#.......#...#.#.#  ",
    "  ###.#.#####.#.#####.#########.#####                                                     #.#.#####.#########.###.#.#####.###  ",
    "  #.........#...#...#.#.....#.#.....#                                                   CQ..#.....#.#...#.......#.#.#.#...#..FA",
    "  #.#######.#####.#######.#.#.#######                                                     #.###.#####.#############.#.#####.#  ",
    "WA......#...#.#.#...#.#...#...#.....#                                                     #.#...#...#.....#.#.#.#.#...#...#.#  ",
    "  #.#####.###.#.###.#.###.###.#.###.#                                                     #.###.#.#####.#.#.#.#.#.#####.###.#  ",
    "  #.#.#...#.#.#.#.#.....#...#.#...#..OB                                                   #.#.......#...#.#.#.......#.#.#.#.#  ",
    "  ###.###.#.#.#.#.#.###.###.#.###.###                                                     #.#.#.#########.#.#.#####.#.#.#.#.#  ",
    "  #.....#.............#.....#.......#                                                     #...#.................#...........#  ",
    "  #.#########.#.#.###.#.###.#.#.#.###                                                     #########################.#####.#.#  ",
    "  #.....#.....#.#.#.#.#.#...#.#.#.#.#                                                     #...#...................#.#...#.#.#  ",
    "  #.###.#####.#.#.#.#############.#.#                                                     #.#.#.#######.#.#####.#####.#.###.#  ",
    "  #...#...#...#.#.#.....#.#.#...#.#.#                                                     #.#.#.#.....#.#...#...#.....#...#.#  ",
    "  ###.#.###############.#.#.#.#.###.#                                                     #.#.#.###.###.#####.###.#####.#####  ",
    "ZA..#.#...#.#.#...#...#.......#...#.#                                                   KN..#.#.......#.#.......#...#.#.#....FB",
    "  #.#.#.###.#.#.#.###.#.###.###.###.#                                                     #.#.#####.#.#########.###.#.#.#.#.#  ",
    "  #...#.........#.......#.#.#........SM                                                   #.#.......#.#.....#.......#.#...#.#  ",
    "  ###########.###.#######.###########                                                     #############.#.###########.#######  ",
    "  #.#.....#...#...#...#...#.......#.#                                                     #.........#.#.#.#.#................KL",
    "  #.#.#.###########.#.#.#.#.#.#####.#                                                     #.#####.#.#.###.#.###.#.#####.###.#  ",
    "WW....#.............#...#...#........LU                                                 WW..#...#.#.............#.....#.#...#  ",
    "  ###########.#.#####.###.#.#########                                                     #.###.###.###.###.#.#.#.#.###.###.#  ",
    "CQ..........#.#.....#...#.#...#.....#                                                   BX..#.......#...#.#.#.#.#.#.#.#.#.#..OH",
    "  #.#######.###################.#.###                                                     #####.#.#####.#.###########.###.###  ",
    "  #.#.......#.....#.#...#.......#.#..PE                                                 KL....#.#.#.#.....#...#...#...#.....#  ",
    "  ###.#.#.###.#####.#.#####.#####.#.#                                                     #.#######.#########.#.###.#####.#.#  ",
    "  #.#.#.#.#.....#.......#...#.....#.#                                                     #.#...#...#...#.#.#.....#.#.#...#..GM",
    "  #.###.###.#.#####.#.#####.#.#.###.#                                                     #.#.#.###.###.#.#.###.###.#.###.#.#  ",
    "  #.#.......#.......#.......#.#.....#                                                     #...#...........................#.#  ",
    "  #.#########.#.###.###.###.#####.###                                                     #####.#####.#.#####################  ",
    "  #.........#.#.#...#.#.#.#.#...#...#                                                   RO....#.#.#...#.#...#.#.#.#.........#  ",
    "  ###.#.#####.#####.#.#.#.#####.#####                                                     ###.###.#######.#.#.#.#.#.#.###.###  ",
    "WJ..#.#.#...#.#...#.#...#.....#.#.#..WA                                                   #.........#.....#.......#.#.#.....#  ",
    "  #.#.#.###.###.#.#######.#.#.#.#.#.#                                                     #.#######.#.###.###.###.#.#####.#.#  ",
    "  #.#.#...#.....#.#...#.#.#.#.....#.#                                                     #.#.......#.#.....#.#.#...#.....#.#  ",
    "  #.#.###.#.#.#.#####.#.###.#.#.#.#.#                                                     #.#####.###.#########.#.#.#######.#  ",
    "  #...#.....#.#.............#.#.#...#                                                     #.#.#.............#.....#.#...#....OB",
    "  #.#.###.#.#.#####.###.#.#########.#    D       C       U           W       F   T        ###.#.###.###.#########.#.###.###.#  ",
    "  #.#.#...#.#...#.....#.#...#.#.....#    I       O       I           J       B   V        #.#.....#...#.#...#.#...#.#.......#  ",
    "  #.#####.###.#.###.###.#####.#.#.#######.#######.#######.###########.#######.###.#########.#.#######.#.#.#.#.###.###.###.#.#  ",
    "  #.....#.#.#.#...#.#.#...#.....#.#.......#...#.#.#...........#.#.#...#.........#.#.......#.#.#...#...#...#.#.....#.#.#.#.#.#  ",
    "  #.#####.#.#.#####.#.###########.#####.#.#.#.#.#.#####.###.###.#.#.#.###.#######.#.#.#.###.###.#######.#.###.#.#.#.#.#.###.#  ",
    "  #.#.#.#.#.#.#.....#.#.#...#.#.#.#.#...#...#.#.......#.#...#.#.....#.#.....#...#...#.#.#.........#.#...#.#...#.#.#.....#...#  ",
    "  ###.#.#.#.#######.#.#.#.###.#.#.#.#.#.###.#####.###.###.###.###.#####.###.###.#.###.#.#.#####.###.###.#.#.#.#.###########.#  ",
    "  #.............#...........#.....#...#.#...#.#.#...#...#.....#...#.#...#.....#...#.#.#...#...#.......#.#.#.#.#...#.........#  ",
    "  #####.#.#.#.#####.###############.#.#####.#.#.#.###.#######.###.#.#####.#######.#.#######.###.###.###.#.#####.###.###.###.#  ",
    "  #.....#.#.#...#.............#...#.#...#...#.......#.#.....#.#.#...#.#.....#.#.#.#...#.......#.#.#.#...#.#.#.#...#...#.#...#  ",
    "  ###.#.###.#####.#####.#########.#.#######.#.###.#.#####.#.#.#.###.#.###.#.#.#.#.#.###.###.#.###.###.#.###.#.#####.#.###.#.#  ",
    "  #...#.#.......#...#.....#.......#.#.#.#...#.#...#.#.....#...#.........#.#.#...#.........#.#...#.#...#.....#...#...#.#...#.#  ",
    "  ###.#####.#####.#######.#.###.#.###.#.#.###.#.#.#######.#######.#####.###.#.#.#.#####.#######.#.###.###.###.#######.#####.#  ",
    "  #.#.#.#.....#...#.......#.#...#.#.#.......#.#.#...#.#...#.#.#.#.#.....#.#...#.#.....#.#.#.........#.#.#.........#...#...#.#  ",
    "  #.###.###.###.#.#####.#.#####.###.#####.#######.###.###.#.#.#.#.###.#.#.#####.###.#####.###.#.###.###.#.#.###.#####.#.###.#  ",
    "  #...........#.#.#.....#.#.................#.#.#.....#.......#.#.#.#.#.#.......#.......#...#.#...#.#.#...#.#.....#.......#.#  ",
    "  #######.###.###.#.###.#####.#####.#.###.#.#.#.###.#####.###.#.#.#.#.#.###.#####.#####.#.###.###.###.#.#.#.###.###.#.#####.#  ",
    "  #...#.....#...#.#.#...#.....#.#...#.#...#.#.......#.......#.#.....#.#.#.....#.......#...#.#.#.....#...#.#...#.#...#.....#.#  ",
    "  ###.###.#####.#####.#.#####.#.#########.###.###.#.#####.#.###########.#.#.#####.#####.#.#.#.###########.#####.#.#.#.#.#.#.#  ",
    "  #.#.........#...#...#.....#.#...#.#.#.#...#...#.#...#.#.#.......#.....#.#...#.......#.#.#.#.#.....#.#.....#...#.#.#.#.#.#.#  ",
    "  #.#####.#####.#######.#########.#.#.#.#.#######.###.#.#.#############.#.#.#####.###.###.#.###.#####.###.###.###.#.#.#.#.###  ",
    "  #...........#.....#.#.#.................#.#.......#...#...#...#.....#.#.#.#.#.#.#.#.#.#.#...#...#.#.......#...#.#.#.#.#...#  ",
    "  #.###.#.###########.#.###.#.###.#.#.#.#.#.#.#####.#####.#.###.###.#.#.#.###.#.#.#.###.###.#####.#.###.#.#.#######.#.#######  ",
    "  #...#.#.......#.#...#.#.#.#.#.#.#.#.#.#.#.....#.....#...#...#.#.#.#.#.#.....#.......#.....#...#.#...#.#.#.....#...#.#.....#  ",
    "  #.#.###.#######.###.###.###.#.#########.###########.###.#####.#.#.#.#.#.#######.###.#.#####.###.#.#.#####.###.###.#####.###  ",
    "  #.#.#.#.......#.#.......#...#.......#.....#.#.#...#.#.#.#.....#...#...#.....#.#...#.#.............#.#.#.#.#.#...#.......#.#  ",
    "  #.###.#.###.###.#.###.#.#########.#.###.###.#.#.#.#.#.#.#.###.#.#######.#####.#.#####.#####.###.#####.#.###.#.#####.#.#.#.#  ",
    "  #...#.....#.#.#.#.#...#...#.#.#...#...#.#.......#.#.#.....#...#.....#.#...#...#.#.#...#...#.#.#.......#.#...#...#...#.#...#  ",
    "  #####.###.###.#.#######.#.#.#.#####.###.#######.#.#.#######.#####.#.#.#.#####.#.###.#.#.#####.#.#######.###.#######.###.###  ",
    "  #.#...#...#...........#.#...#...........#...#...#.....#.....#.#.#.#...#.....#...#...#...#.#.#.#.#.............#...#.#.#...#  ",
    "  #.#.#######.#.#.###.#.###.#.###########.#.#####.###########.#.#.#####.#.###.###.#.###.#.#.#.#.#####.###.#.#.###.###.#.#.###  ",
    "  #.......#...#.#.#.#.#.....#.#...#.........#.....#.......#...#.....#...#.#.#.#...#...#.#.#.#.#.......#.#.#.#.......#.#.....#  ",
    "  #.#######.#.#.#.#.###.#####.#.###########.#####.#.###.#####.#.#######.#.#.#####.###.#.###.#.#.###.###.#.#.###.#.#####.###.#  ",
    "  #...#.....#.#.#.#.....#...........#.#.#...#...#...#.#.....#.....#.....#...#.#.......#...........#.....#.#.#.#.#...#.....#.#  ",
    "  #.###.#.#########.#.#.#.#.#.###.#.#.#.#.###.#.#####.#.###.###.#####.#####.#.#.#.#.###.###.###.###.#########.#.###.#.#.#.#.#  ",
    "  #...#.#...#.......#.#.#.#.#.#...#...........#.#.........#.#.....#.....#.....#.#.#.#...#.....#...#...........#...#.#.#.#.#.#  ",
    "  #############################################.#.#####.#######.###.#####.###########.#######################################  ",
    "                                               B A     H       P   K     D           U                                         ",
    "                                               X A     Y       E   N     R           I                                         "
};

const VS in1 = {"         A           ", "         A           ", "  #######.#########  ",
                 "  #######.........#  ", "  #######.#######.#  ", "  #######.#######.#  ",
                 "  #######.#######.#  ", "  #####  B    ###.#  ", "BC...##  C    ###.#  ",
                 "  ##.##       ###.#  ", "  ##...DE  F  ###.#  ", "  #####    G  ###.#  ",
                 "  #########.#####.#  ", "DE..#######...###.#  ", "  #.#########.###.#  ",
                 "FG..#########.....#  ", "  ###########.#####  ", "             Z       ",
                 "             Z       "};

const VS in2 = {
    "             Z L X W       C                 ",
    "             Z P Q B       K                 ",
    "  ###########.#.#.#.#######.###############  ",
    "  #...#.......#.#.......#.#.......#.#.#...#  ",
    "  ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###  ",
    "  #.#...#.#.#...#.#.#...#...#...#.#.......#  ",
    "  #.###.#######.###.###.#.###.###.#.#######  ",
    "  #...#.......#.#...#...#.............#...#  ",
    "  #.#########.#######.#.#######.#######.###  ",
    "  #...#.#    F       R I       Z    #.#.#.#  ",
    "  #.###.#    D       E C       H    #.#.#.#  ",
    "  #.#...#                           #...#.#  ",
    "  #.###.#                           #.###.#  ",
    "  #.#....OA                       WB..#.#..ZH",
    "  #.###.#                           #.#.#.#  ",
    "CJ......#                           #.....#  ",
    "  #######                           #######  ",
    "  #.#....CK                         #......IC",
    "  #.###.#                           #.###.#  ",
    "  #.....#                           #...#.#  ",
    "  ###.###                           #.#.#.#  ",
    "XF....#.#                         RF..#.#.#  ",
    "  #####.#                           #######  ",
    "  #......CJ                       NM..#...#  ",
    "  ###.#.#                           #.###.#  ",
    "RE....#.#                           #......RF",
    "  ###.###        X   X       L      #.#.#.#  ",
    "  #.....#        F   Q       P      #.#.#.#  ",
    "  ###.###########.###.#######.#########.###  ",
    "  #.....#...#.....#.......#...#.....#.#...#  ",
    "  #####.#.###.#######.#######.###.###.#.#.#  ",
    "  #.......#.......#.#.#.#.#...#...#...#.#.#  ",
    "  #####.###.#####.#.#.#.#.###.###.#.###.###  ",
    "  #.......#.....#.#...#...............#...#  ",
    "  #############.#.#.###.###################  ",
    "               A O F   N                     ",
    "               A A D   M                     "
};
// clang-format on

bool iscap(char c)
{
    return 'A' <= c && c <= 'Z';
}

using PSB = pair<string, bool>;

struct Vault
{
    VS rows;
    int H, W;
    map<PSB, AI2> s2p;
    map<AI2, PSB> p2s;
    bool is_outer(AI2 rc) const
    {
        return rc[0] == 0 || rc[1] == 0 || rc[0] == H - 1 || rc[1] == W - 1;
    }
    PSB get_hlabel(int r, int c)
    {
        auto c1 = AI2{r, c};
        auto c2 = AI2{r, c + 1};
        auto d1 = at(c1);
        auto d2 = at(c2);
        if (iscap(d1) && iscap(d2)) {
            return {string{d1, d2}, is_outer(c1) || is_outer(c2)};
        }
        return {};
    }

    PSB get_vlabel(int r, int c)
    {
        auto c1 = AI2{r, c};
        auto c2 = AI2{r + 1, c};
        auto d1 = at(c1);
        auto d2 = at(c2);
        if (iscap(d1) && iscap(d2)) {
            return {string{d1, d2}, is_outer(c1) || is_outer(c2)};
        }
        return {};
    }

    explicit Vault(VS area) : rows(area)

    {
        assert(!rows.empty());
        H = ~rows;
        W = ~(rows[0]);
        for (auto& r : rows) {
            assert(~r == W);
            (void)r;
        }
        FOR (r, 0, < H) {
            FOR (c, 0, < W) {
                auto x = at(AI2{r, c});
                if (x != '.') {
                    continue;
                }
                array<PSB, 4> ss;
                ss[0] = get_hlabel(r, c - 2);
                ss[1] = get_hlabel(r, c + 1);
                ss[2] = get_vlabel(r - 2, c);
                ss[3] = get_vlabel(r + 1, c);
                vector<PSB> labels;
                for (auto& psb : ss) {
                    if (!psb.FST.empty()) {
                        labels.push_back(psb);
                    }
                }
                assert(~labels <= 1);
                if (~labels == 1) {
                    auto rc = AI2{r, c};
                    assert(p2s.find(rc) == p2s.end());
                    assert(s2p.find(labels[0]) == s2p.end());
                    s2p[labels[0]] = rc;
                    p2s[rc] = labels[0];
                }
            }
        }
    }
    char at(AI2 rc) const
    {
        assert(0 <= rc[0] && rc[0] < H);
        assert(0 <= rc[1] && rc[1] < W);
        return rows[rc[0]][rc[1]];
    }
    char& at(AI2 rc)
    {
        assert(0 <= rc[0] && rc[0] < H);
        assert(0 <= rc[1] && rc[1] < W);
        return rows[rc[0]][rc[1]];
    }
};
const AI2 UP{-1, 0};
const AI2 LEFT{0, -1};
const AI2 DOWN{1, 0};
const AI2 RIGHT{0, 1};
const array<AI2, 4> DIRS = {UP, RIGHT, DOWN, LEFT};

struct BitMatrix
{
    int H, W;
    vector<bool> vb;
    BitMatrix(int H, int W) : H(H), W(W), vb(W * H) {}
    bool at(AI2 rc) const
    {
        assert(0 <= rc[0] && rc[0] < H);
        assert(0 <= rc[1] && rc[1] < W);
        return vb[rc[0] * W + rc[1]];
    }
    void set(AI2 rc)
    {
        assert(0 <= rc[0] && rc[0] < H);
        assert(0 <= rc[1] && rc[1] < W);
        vb[rc[0] * W + rc[1]] = true;
    }
};

struct Visited
{
    int64_t H, W;
    Visited(int H, int W) : H(H), W(W) {}
#if 0
    unordered_set<int64_t> s;
    void set(AI3 x)
    {
        auto i = x[0] * W + x[1] + x[2] * W * H;
        s.insert(i);
    }
    bool at(AI3 x) const
    {
        auto i = x[0] * W + x[1] + x[2] * W * H;
        return s.count(i) > 0;
    }
#else
    set<AI3> s;
    void set(AI3 x) { s.insert(x); }
    bool at(AI3 x) const { return s.count(x) > 0; }
#endif
};

int solve(const Vault& v)
{
    AI3 start, dest;
    {
        auto it = v.s2p.find(PSB{"AA", true});
        assert(it != v.s2p.end());
        auto x = it->second;
        start = AI3{x[0], x[1], 0};
    }
    {
        auto it = v.s2p.find(PSB{"ZZ", true});
        assert(it != v.s2p.end());
        auto x = it->second;
        dest = AI3{x[0], x[1], 0};
    }
    Visited visited(v.H, v.W);
    vector<AI3> frontier, next_frontier;
    int step = 0;
    frontier.push_back(start);
    visited.set(start);
    assert(start != dest);

    while (!frontier.empty()) {
        printf("frontier: %s, visited: %s, steps: %d\n", to_string(~frontier).c_str(),
               to_string(~visited.s).c_str(), step);
        next_frontier.clear();
        ++step;
        for (auto& fx3 : frontier) {
            auto fx2 = AI2{fx3[0], fx3[1]};
            for (auto dir : DIRS) {
                auto nb2 = fx2 + dir;
                auto nb = AI3{nb2[0], nb2[1], fx3[2]};
                if (nb == dest) {
                    return step;
                }
                if (visited.at(nb)) {
                    continue;
                }
                visited.set(nb);
                if (v.at(nb2) == '.') {
                    next_frontier.push_back(nb);
                }
            }
            auto it = v.p2s.find(fx2);
            if (it == v.p2s.end()) {
                continue;
            }
            auto psb = it->second;
            if (psb.FST == "AA" || psb.FST == "ZZ") {
                continue;
            }
            bool outer = psb.SND;
            psb.second = !psb.second;
            auto itt = v.s2p.find(psb);
            assert(itt != v.s2p.end());
            AI2 nb2 = itt->second;
            AI3 nb = AI3{nb2[0], nb2[1], fx3[2] + (outer ? -1 : 1)};
            if (nb[2] < 0) {
                continue;
            }
            if (nb == dest) {
                return step;
            }
            if (visited.at(nb)) {
                continue;
            }
            visited.set(nb);
            assert(v.at(nb2) == '.');
            next_frontier.push_back(nb);
        }
        frontier.swap(next_frontier);
    }
    assert(false);
    return INT_MAX;
}

int main()
{
    Vault v(main_input);
    // Vault v(in2);
    int r = solve(v);
    printf("r: %d\n", r);
    return 0;
}
