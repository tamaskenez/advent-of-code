#include "common.h"

using DigitSet = string;

using AndOfInpConds = map<int, DigitSet>;  // input digit (#1..#14) to concrete digits, AND of constraints on inputs
// conditional value (cond on input values)
using OrOfAndOfInpConds = vector<AndOfInpConds>;  // CondsOnInps OR CondsOnInps OR ...
using ResultToOrs = map<int64_t, OrOfAndOfInpConds>;

ResultToOrs constant_value(int64_t i)
{
    return ResultToOrs({{i, OrOfAndOfInpConds({AndOfInpConds()})}});
}

optional<AndOfInpConds> conjuction(const AndOfInpConds& cfg1, const AndOfInpConds& cfg2)
{
    if (cfg1 == cfg2) {
        return cfg1;
    }
    if (cfg1.empty()) {
        return cfg2;
    }
    if (cfg2.empty()) {
        return cfg1;
    }
    AndOfInpConds result;
    for (auto& [k1, v1] : cfg1) {
        auto it = cfg2.find(k1);  // condition on the same input
        if (it == cfg2.end() || it->second == v1) {
            result.insert(make_pair(k1, v1));
            continue;
        }
        auto& v2 = it->second;
        auto is = set_intersection(BE(v1), BE(v2));
        if (is.empty()) {
            return nullopt;
        }
        auto vis = DigitSet(BE(is));
        result.insert(make_pair(k1, vis));
    }
    for (auto& [k2, v2] : cfg2) {
        if (cfg1.count(k2) == 0) {
            result.insert(make_pair(k2, v2));
        }
    }
    result.insert(BE(cfg2));
    return result;
}

static int counter = 0;
template <class Op>
ResultToOrs perform_operation(const ResultToOrs& arg1, const ResultToOrs& arg2)
{
    ResultToOrs rtos;
    for (auto& [v1, ooaoics1] : arg1) {
        for (auto& aoics1 : ooaoics1) {
            for (auto& [v2, ooaoics2] : arg2) {
                for (auto& aoics2 : ooaoics2) {
                    auto aoics = conjuction(aoics1, aoics2);
                    if (aoics) {
                        auto result_value = Op()(v1, v2);
                        rtos[result_value].PB(*aoics);
                    }
                }
            }
        }
    }
    set<int> mentioned_inps;
    for (auto& [v, rto] : rtos) {
        for (auto& aoics : rto) {
            for (auto& [inp, digitset] : aoics) {
                mentioned_inps.insert(inp);
            }
        }
    }

    for (auto mi : mentioned_inps) {
        for (auto& [v, rto] : rtos) {
            DigitSet value_cond;
            set<AndOfInpConds> aoics_without_mi;
            for (auto aoics : rto) {
                auto it = aoics.find(mi);
                if (it == aoics.end()) {
                    value_cond.append("123456789");
                    aoics.erase(mi);
                } else {
                    value_cond.append(it->second);
                }

                aoics_without_mi.insert(aoics);
            }
            if (aoics_without_mi.size() == 1) {
                auto new_single_aoic = *aoics_without_mi.begin();
                sort_unique_trunc(value_cond);
                bool all_digits = value_cond.size() == 9;
                if (!all_digits) {
                    new_single_aoic[mi] = value_cond;
                }
                rto = {new_single_aoic};
            } else {
                // Try if any value for mi result in the same single remainder
                map<AndOfInpConds, string> aoics_without_mi2;
                for (auto aoics : rto) {
                    auto it = aoics.find(mi);
                    if (it == aoics.end()) {
                        FOR (ch, '1', <= '9') {
                            aoics_without_mi2[aoics] += ch;
                        }
                    } else {
                        auto digits = it->second;
                        aoics.erase(mi);
                        FOR (ch, '1', <= '9') {
                            if (digits.find(ch) != string::npos) {
                                aoics_without_mi2[aoics] += ch;
                            }
                        }
                    }
                }
                rto.clear();
                for (auto& [aoics, digits] : aoics_without_mi2) {
                    sort_unique_trunc(digits);
                    rto.PB(aoics);
                }
            }
        }
    }

    ++counter;
    return rtos;
}

struct Eql
{
    int64_t operator()(int64_t a, int64_t b) const { return a == b ? 1 : 0; }
};

void print(const map<char, string>& regs, char reg)
{
    printf(":%c = %s\n", reg, regs.at(reg).c_str());
}

void print(const map<char, ResultToOrs>& regs, char reg)
{
    printf("%c =", reg);
    auto& rtos = regs.at(reg);
    assert(!rtos.empty());
    if (~rtos == 1 && rtos.begin()->second.size() == 1 && rtos.begin()->second[0].empty()) {
        printf(" %lld\n", rtos.begin()->first);
        return;
    }
    printf("\n");
    for (auto& [v, rto] : rtos) {
        printf("%lld if\n", v);
        for (auto& aoic : rto) {
            printf("-");
            for (auto& [inp, digits] : aoic) {
                printf(" #%d=%s", inp, digits.c_str());
            }
            printf("\n");
        }
    }
}

int64_t compiled(const string& input)
{
    int64_t a = 0;
    int64_t b = 0;
    int64_t c = 0;
    int64_t d = 0;
    int64_t e = 0;
    int64_t f = 0;
    int64_t g = 0;
    int64_t h = 0;
    int64_t i = 0;
    int64_t j = 0;
    int64_t k = 0;
    int64_t l = 0;
    int64_t m = 0;
    int64_t n = 0;
    int64_t o = 0;
    int64_t p = 0;
    int64_t q = 0;
    int64_t r = 0;
    int64_t s = 0;
    int64_t t = 0;
    int64_t u = 0;
    int64_t v = 0;
    int64_t w = 0;
    int64_t x = 0;
    int64_t y = 0;
    int64_t z = 0;
    int64_t i1 = input[0] - '0';
    int64_t i2 = input[1] - '0';
    int64_t i3 = input[2] - '0';
    int64_t i4 = input[3] - '0';
    int64_t i5 = input[4] - '0';
    int64_t i6 = input[5] - '0';
    int64_t i7 = input[6] - '0';
    int64_t i8 = input[7] - '0';
    int64_t i9 = input[8] - '0';
    int64_t i10 = input[9] - '0';
    int64_t i11 = input[10] - '0';
    int64_t i12 = input[11] - '0';
    int64_t i13 = input[12] - '0';
    int64_t i14 = input[13] - '0';
    w = i1;
    x *= 0;
    x += z;
    x %= 26;
    z /= 1;
    x += 12;
    x = (x == w) ? 1 : 0;
    assert(x == (0));
    x = (x == 0) ? 1 : 0;
    y *= 0;
    y += 25;
    y *= x;
    y += 1;
    z *= y;
    y *= 0;
    y += w;
    y += 4;
    y *= x;
    z += y;
    w = i2;
    x *= 0;
    x += z;
    x %= 26;
    assert(x == (i1 + 4));
    z /= 1;
    x += 11;
    x = (x == w) ? 1 : 0;
    assert(x == (0));
    x = (x == 0) ? 1 : 0;
    y *= 0;
    y += 25;
    y *= x;
    y += 1;
    z *= y;
    y *= 0;
    y += w;
    y += 10;
    y *= x;
    z += y;
    w = i3;
    x *= 0;
    x += z;
    x %= 26;
    assert(x == (i2 + 10));
    z /= 1;
    x += 14;
    x = (x == w) ? 1 : 0;
    assert(x == (0));
    x = (x == 0) ? 1 : 0;
    y *= 0;
    y += 25;
    y *= x;
    y += 1;
    z *= y;
    y *= 0;
    y += w;
    y += 12;
    y *= x;
    z += y;
    w = i4;
    x *= 0;
    x += z;
    x %= 26;
    assert(x == (i3 + 12));
    z /= 26;
    assert(z == (((i1 + 4) * 26 + i2 + 10)));
    x += -6;
    x = (x == w) ? 1 : 0;
    assert(x == ((i3 + 6 == i4) ? 1 : 0));
    x = (x == 0) ? 1 : 0;
    assert(x == ((i3 + 6 == i4) ? 0 : 1));
    y *= 0;
    y += 25;
    y *= x;
    assert(y == ((i3 + 6 == i4) ? 0 : 25));
    y += 1;
    assert(y == ((i3 + 6 == i4) ? 1 : 26));
    z *= y;
    y *= 0;
    y += w;
    y += 14;
    y *= x;
    z += y;
    assert(z == ((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)));
    w = i5;
    x *= 0;
    x += z;
    x %= 26;
    assert(x == (((i3 + 6 == i4) ? i2 + 10 : i4 + 14)));
    z /= 1;
    x += 15;
    x = (x == w) ? 1 : 0;
    assert(x == (0));
    x = (x == 0) ? 1 : 0;
    y *= 0;
    y += 25;
    y *= x;
    y += 1;
    z *= y;
    y *= 0;
    y += w;
    y += 6;
    y *= x;
    z += y;
    w = i6;
    x *= 0;
    x += z;
    x %= 26;
    assert(x == (i5 + 6));
    z /= 1;
    x += 12;
    x = (x == w) ? 1 : 0;
    assert(x == (0));
    x = (x == 0) ? 1 : 0;
    y *= 0;
    y += 25;
    y *= x;
    y += 1;
    z *= y;
    y *= 0;
    y += w;
    y += 16;
    y *= x;
    z += y;
    w = i7;
    x *= 0;
    x += z;
    x %= 26;
    assert(x == (i6 + 16));
    z /= 26;
    assert(z == ((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)));
    x += -9;
    x = (x == w) ? 1 : 0;
    x = (x == 0) ? 1 : 0;
    assert(x == ((i6 + 7 == i7) ? 0 : 1));
    y *= 0;
    y += 25;
    y *= x;
    y += 1;
    assert(y == (((i6 + 7 == i7) ? 1 : 26)));
    z *= y;
    y *= 0;
    y += w;
    y += 1;
    y *= x;
    z += y;
    assert(z == (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)));
    w = i8;
    x *= 0;
    x += z;
    x %= 26;
    assert(x == ((i6 + 7 == i7) ? i5 + 6 : i7 + 1));
    z /= 1;
    x += 14;
    assert(x == (((i6 + 7 == i7) ? i5 + 20 : i7 + 15)));
    x = (x == w) ? 1 : 0;
    assert(x == (0));
    x = (x == 0) ? 1 : 0;
    y *= 0;
    y += 25;
    y *= x;
    y += 1;
    z *= y;
    y *= 0;
    y += w;
    y += 7;
    y *= x;
    z += y;
    w = i9;
    x *= 0;
    x += z;
    x %= 26;
    assert(x == (i8 + 7));
    z /= 1;
    x += 14;
    x = (x == w) ? 1 : 0;
    assert(x == (0));
    x = (x == 0) ? 1 : 0;
    y *= 0;
    y += 25;
    y *= x;
    y += 1;
    z *= y;
    y *= 0;
    y += w;
    y += 8;
    y *= x;
    z += y;
    w = i10;
    x *= 0;
    x += z;
    x %= 26;
    assert(x == (i9 + 8));
    z /= 26;
    assert(z == (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7));
    x += -5;
    x = (x == w) ? 1 : 0;
    assert(x == ((i9 + 3 == i10) ? 1 : 0));
    x = (x == 0) ? 1 : 0;
    assert(x == ((i9 + 3 == i10) ? 0 : 1));
    y *= 0;
    y += 25;
    y *= x;
    y += 1;
    assert(y == (((i9 + 3 == i10) ? 1 : 26)));
    z *= y;
    y *= 0;
    y += w;
    y += 11;
    y *= x;
    assert(y == (((i9 + 3 == i10) ? 0 : i10 + 11)));
    z += y;
    w = i11;
    x *= 0;
    x += z;
    x %= 26;
    assert(x == (((i9 + 3 == i10) ? i8 + 7 : i10 + 11)));
    z /= 26;
    assert(z ==
           (((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))));
    x += -9;
    x = (x == w) ? 1 : 0;
    assert(x == (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 0));
    x = (x == 0) ? 1 : 0;
    assert(x == ((((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : 1)));
    y *= 0;
    y += 25;
    y *= x;
    assert(y == ((((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : 25)));
    y += 1;
    assert(y == ((((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)));
    z *= y;
    y *= 0;
    y += w;
    y += 8;
    y *= x;
    assert(y == ((((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)));
    z += y;
    w = i12;
    x *= 0;
    x += z;
    x %= 26;
    assert(x ==
           ((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
              (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
             (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
            26));
    z /= 26;
    assert(z == ((((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? ((i6 + 7 == i7) ? ((i9 + 3 == i10) ? ((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) : (((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6))
                                                                                    : ((i9 + 3 == i10) ? ((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) : (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * 26 + i7 + 1)))
                                                                  : (((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                      : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))))));
    x += -5;
    x = (x == w) ? 1 : 0;
    x = (x == 0) ? 1 : 0;
    y *= 0;
    y += 25;
    y *= x;
    y += 1;
    z *= y;
    y *= 0;
    y += w;
    y += 3;
    y *= x;
    z += y;
    w = i13;
    x *= 0;
    x += z;
    x %= 26;
    z /= 26;
    x += -2;
    x = (x == w) ? 1 : 0;
    x = (x == 0) ? 1 : 0;
    y *= 0;
    y += 25;
    y *= x;
    y += 1;
    z *= y;
    y *= 0;
    y += w;
    y += 1;
    y *= x;
    z += y;
    w = i14;
    x *= 0;
    x += z;
    x %= 26;
    z /= 26;
    x += -7;
    x = (x == w) ? 1 : 0;
    x = (x == 0) ? 1 : 0;
    y *= 0;
    y += 25;
    y *= x;
    y += 1;
    z *= y;
    y *= 0;
    y += w;
    y += 8;
    y *= x;
    z += y;
    assert(z == ((((((((((((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? ((i6 + 7 == i7) ? ((i9 + 3 == i10) ? ((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) : (((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6))
                                                                                            : ((i9 + 3 == i10) ? ((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) : (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * 26 + i7 + 1)))
                                                                          : (((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                              : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))))) *
                        ((25 * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                         : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                       (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                      (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                     26) +
                                    -5) == i12)
                                      ? 1
                                      : 0) == 0)
                                    ? 1
                                    : 0)) +
                         1)) +
                       ((i12 + 3) * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                              : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                            (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                           (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                          26) +
                                         -5) == i12)
                                           ? 1
                                           : 0) == 0)
                                         ? 1
                                         : 0))) /
                      26) *
                     ((25 * ((((((((((((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? ((i6 + 7 == i7) ? ((i9 + 3 == i10) ? ((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) : (((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6))
                                                                                                        : ((i9 + 3 == i10) ? ((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) : (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * 26 + i7 + 1)))
                                                                                      : (((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                                          : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))))) *
                                    ((25 * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                     : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                   (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                  (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                 26) +
                                                -5) == i12)
                                                  ? 1
                                                  : 0) == 0)
                                                ? 1
                                                : 0)) +
                                     1)) +
                                   ((i12 + 3) * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                          : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                        (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                       (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                      26) +
                                                     -5) == i12)
                                                       ? 1
                                                       : 0) == 0)
                                                     ? 1
                                                     : 0))) %
                                  26) +
                                 -2) == i13)
                                   ? 1
                                   : 0) == 0)
                                 ? 1
                                 : 0)) +
                      1)) +
                    ((i13 + 1) * ((((((((((((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? ((i6 + 7 == i7) ? ((i9 + 3 == i10) ? ((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) : (((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6))
                                                                                                             : ((i9 + 3 == i10) ? ((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) : (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * 26 + i7 + 1)))
                                                                                           : (((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                                               : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))))) *
                                         ((25 * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                          : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                        (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                       (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                      26) +
                                                     -5) == i12)
                                                       ? 1
                                                       : 0) == 0)
                                                     ? 1
                                                     : 0)) +
                                          1)) +
                                        ((i12 + 3) * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                               : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                             (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                            (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                           26) +
                                                          -5) == i12)
                                                            ? 1
                                                            : 0) == 0)
                                                          ? 1
                                                          : 0))) %
                                       26) +
                                      -2) == i13)
                                        ? 1
                                        : 0) == 0)
                                      ? 1
                                      : 0))) /
                   26) *
                  ((25 * (((((((((((((((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? ((i6 + 7 == i7) ? ((i9 + 3 == i10) ? ((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) : (((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6))
                                                                                                        : ((i9 + 3 == i10) ? ((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) : (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * 26 + i7 + 1)))
                                                                                      : (((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                                          : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))))) *
                                    ((25 * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                     : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                   (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                  (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                 26) +
                                                -5) == i12)
                                                  ? 1
                                                  : 0) == 0)
                                                ? 1
                                                : 0)) +
                                     1)) +
                                   ((i12 + 3) * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                          : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                        (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                       (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                      26) +
                                                     -5) == i12)
                                                       ? 1
                                                       : 0) == 0)
                                                     ? 1
                                                     : 0))) /
                                  26) *
                                 ((25 * ((((((((((((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? ((i6 + 7 == i7) ? ((i9 + 3 == i10) ? ((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) : (((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6))
                                                                                                                    : ((i9 + 3 == i10) ? ((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) : (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * 26 + i7 + 1)))
                                                                                                  : (((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                                                      : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))))) *
                                                ((25 * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                 : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                               (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                              (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                             26) +
                                                            -5) == i12)
                                                              ? 1
                                                              : 0) == 0)
                                                            ? 1
                                                            : 0)) +
                                                 1)) +
                                               ((i12 + 3) * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                      : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                                    (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                                   (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                                  26) +
                                                                 -5) == i12)
                                                                   ? 1
                                                                   : 0) == 0)
                                                                 ? 1
                                                                 : 0))) %
                                              26) +
                                             -2) == i13)
                                               ? 1
                                               : 0) == 0)
                                             ? 1
                                             : 0)) +
                                  1)) +
                                ((i13 + 1) * ((((((((((((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? ((i6 + 7 == i7) ? ((i9 + 3 == i10) ? ((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) : (((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6))
                                                                                                                         : ((i9 + 3 == i10) ? ((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) : (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * 26 + i7 + 1)))
                                                                                                       : (((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                                                           : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))))) *
                                                     ((25 * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                      : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                                    (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                                   (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                                  26) +
                                                                 -5) == i12)
                                                                   ? 1
                                                                   : 0) == 0)
                                                                 ? 1
                                                                 : 0)) +
                                                      1)) +
                                                    ((i12 + 3) * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                           : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                                         (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                                        (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                                       26) +
                                                                      -5) == i12)
                                                                        ? 1
                                                                        : 0) == 0)
                                                                      ? 1
                                                                      : 0))) %
                                                   26) +
                                                  -2) == i13)
                                                    ? 1
                                                    : 0) == 0)
                                                  ? 1
                                                  : 0))) %
                               26) +
                              -7) == i14)
                                ? 1
                                : 0) == 0)
                              ? 1
                              : 0)) +
                   1)) +
                 ((i14 + 8) * (((((((((((((((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? ((i6 + 7 == i7) ? ((i9 + 3 == i10) ? ((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) : (((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6))
                                                                                                             : ((i9 + 3 == i10) ? ((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) : (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * 26 + i7 + 1)))
                                                                                           : (((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                                               : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))))) *
                                         ((25 * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                          : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                        (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                       (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                      26) +
                                                     -5) == i12)
                                                       ? 1
                                                       : 0) == 0)
                                                     ? 1
                                                     : 0)) +
                                          1)) +
                                        ((i12 + 3) * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                               : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                             (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                            (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                           26) +
                                                          -5) == i12)
                                                            ? 1
                                                            : 0) == 0)
                                                          ? 1
                                                          : 0))) /
                                       26) *
                                      ((25 * ((((((((((((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? ((i6 + 7 == i7) ? ((i9 + 3 == i10) ? ((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) : (((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6))
                                                                                                                         : ((i9 + 3 == i10) ? ((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) : (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * 26 + i7 + 1)))
                                                                                                       : (((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                                                           : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))))) *
                                                     ((25 * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                      : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                                    (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                                   (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                                  26) +
                                                                 -5) == i12)
                                                                   ? 1
                                                                   : 0) == 0)
                                                                 ? 1
                                                                 : 0)) +
                                                      1)) +
                                                    ((i12 + 3) * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                           : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                                         (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                                        (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                                       26) +
                                                                      -5) == i12)
                                                                        ? 1
                                                                        : 0) == 0)
                                                                      ? 1
                                                                      : 0))) %
                                                   26) +
                                                  -2) == i13)
                                                    ? 1
                                                    : 0) == 0)
                                                  ? 1
                                                  : 0)) +
                                       1)) +
                                     ((i13 + 1) * ((((((((((((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? ((i6 + 7 == i7) ? ((i9 + 3 == i10) ? ((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) : (((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6))
                                                                                                                              : ((i9 + 3 == i10) ? ((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) : (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * 26 + i7 + 1)))
                                                                                                            : (((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                                                                : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))))) *
                                                          ((25 * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                           : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                                         (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                                        (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                                       26) +
                                                                      -5) == i12)
                                                                        ? 1
                                                                        : 0) == 0)
                                                                      ? 1
                                                                      : 0)) +
                                                           1)) +
                                                         ((i12 + 3) * (((((((((((i9 + 3 == i10) ? (((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1))
                                                                                                : (((((((((i1 + 4) * 26 + i2 + 10)) * ((i3 + 6 == i4) ? 1 : 26) + ((i3 + 6 == i4) ? 0 : i4 + 14)) * 26 + i5 + 6)) * ((i6 + 7 == i7) ? 1 : 26) + ((i6 + 7 == i7) ? 0 : i7 + 1)) * 26) + i8 + 7))) *
                                                                              (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 1 : 26)) +
                                                                             (((((i9 + 3 == i10) ? i8 - 2 : i10 + 2)) == i11) ? 0 : i11 + 8)) %
                                                                            26) +
                                                                           -5) == i12)
                                                                             ? 1
                                                                             : 0) == 0)
                                                                           ? 1
                                                                           : 0))) %
                                                        26) +
                                                       -2) == i13)
                                                         ? 1
                                                         : 0) == 0)
                                                       ? 1
                                                       : 0))) %
                                    26) +
                                   -7) == i14)
                                     ? 1
                                     : 0) == 0)
                                   ? 1
                                   : 0))));

    return z;
}

int main2()
{
    if (0) {
        string input(14, '9');
        {
            int c = 0;
            for (;;) {
                auto z = compiled(input);
                if (++c == 10000000 || z == 0) {
                    printf("%s -> %lld\n", input.c_str(), z);
                    if (z == 0) {
                        exit(0);
                    }
                    c = 0;
                }
                int i = ~input - 1;
                for (; i >= 0; --i) {
                    if (--input[i] >= '1') {
                        break;
                    }
                    input[i] = '9';
                }
            }
        }
    }
    ifstream f(CMAKE_CURRENT_SOURCE_DIR "/d24_input.txt");
    assert(f.good());
    auto lines = read_lines(f);
    map<char, ResultToOrs> regs;
    bool compile = false;
    FOR (ch, 'a', <= 'z') {
        regs[ch] = constant_value(0);
        if (compile) {
            printf("int64_t %c = 0;\n", ch);
        }
    }

    int next_input = 1;

    int line_no = 1;
    for (auto l : lines) {
        if (!compile) {
            printf("=== LINE#%d=====\n%s\n", line_no++, l.c_str());
        }
        auto ls = split(l, " ");
        auto opcode = ls[0];
        assert(~ls[1] == 1);
        char reg = ls[1][0];
        if (~ls == 2) {
            assert(opcode == "inp");
            ResultToOrs rto;
            FOR (i, 1, <= 9) {
                rto[i] = OrOfAndOfInpConds({AndOfInpConds({{next_input, to_string(i)}})});
            }
            regs[reg] = rto;
            if (compile) {
                printf("%c=input[%d];\n", reg, next_input);
            }
            ++next_input;
            continue;
        }

        assert(~ls == 3);
        auto sec = ls[2];
        const auto& arg1 = regs.at(reg);
        ResultToOrs arg2;
        if (~sec == 1 && isalpha(sec[0])) {
            arg2 = regs.at(sec[0]);
        } else {
            arg2 = constant_value(stoi(sec));
        }
        if (compile) {
            if (opcode == "mul") {
                printf("%c*=%s;\n", reg, ls[2].c_str());
            } else if (opcode == "add") {
                printf("%c+=%s;\n", reg, ls[2].c_str());
            } else if (opcode == "mod") {
                printf("%c%%=%s;\n", reg, ls[2].c_str());
            } else if (opcode == "div") {
                printf("%c/=%s;\n", reg, ls[2].c_str());
            } else if (opcode == "eql") {
                printf("%c=(%c==%s)?1:0;\n", reg, reg, ls[2].c_str());
            } else {
                assert(false);
            }
        } else {
            if (opcode == "mul") {
                regs[reg] = perform_operation<std::multiplies<int64_t>>(arg1, arg2);
                print(regs, reg);
            } else if (opcode == "add") {
                regs[reg] = perform_operation<std::plus<int64_t>>(arg1, arg2);
                print(regs, reg);
            } else if (opcode == "mod") {
                regs[reg] = perform_operation<std::modulus<int64_t>>(arg1, arg2);
                print(regs, reg);
            } else if (opcode == "div") {
                regs[reg] = perform_operation<std::divides<int64_t>>(arg1, arg2);
                print(regs, reg);
            } else if (opcode == "eql") {
                regs[reg] = perform_operation<Eql>(arg1, arg2);
                print(regs, reg);
            } else {
                assert(false);
            }
        }
        printf("");
    }
    assert(next_input == 15);
    return 0;
}

optional<int64_t> try_number(const string& s)
{
    try {
        auto n = stoll(s);
        if (to_string(n) == s) {
            return n;
        }
    } catch (...) {
    }
    return nullopt;
}

int compile()
{
    ifstream f(CMAKE_CURRENT_SOURCE_DIR "/d24_input_orig.txt");
    assert(f.good());
    auto lines = read_lines(f);
    FOR (ch, 'a', <= 'z') {
        printf("int64_t %c = 0;\n", ch);
    }
    FOR (i, 1, <= 14) {
        printf("int64_t i%d = input[%d] - '0';\n", i, i - 1);
    }

    int next_input = 1;

    int line_no = 1;
    for (auto l : lines) {
        if (l == "STOP") {
            continue;
        }
        if (l[0] == ':') {
            auto reg = l[1];
            assert(l.substr(2, 3) == " = ");
            printf("assert(%c==(%s));\n", reg, l.substr(5).c_str());
            continue;
        }
        auto ls = split(l, " ");
        auto opcode = ls[0];
        assert(~ls[1] == 1);
        char reg = ls[1][0];
        if (~ls == 2) {
            assert(opcode == "inp");
            printf("%c=i%d;\n", reg, next_input);
            ++next_input;
            continue;
        }

        assert(~ls == 3);
        auto sec = ls[2];

        if (opcode == "mul") {
            printf("%c*=%s;\n", reg, ls[2].c_str());
        } else if (opcode == "add") {
            printf("%c+=%s;\n", reg, ls[2].c_str());
        } else if (opcode == "mod") {
            printf("%c%%=%s;\n", reg, ls[2].c_str());
        } else if (opcode == "div") {
            printf("%c/=%s;\n", reg, ls[2].c_str());
        } else if (opcode == "eql") {
            printf("%c=(%c==%s)?1:0;\n", reg, reg, ls[2].c_str());
        } else {
            assert(false);
        }
    }
    assert(next_input == 15);
    return 0;
}

string paren(const string& s)
{
    if (s.find(' ') == string::npos) {
        return s;
    }
    return "(" + s + ")";
}

int debug()
{
    ifstream f(CMAKE_CURRENT_SOURCE_DIR "/d24_input_orig.txt");
    assert(f.good());
    auto lines = read_lines(f);
    map<char, string> regs;
    bool compile = false;
    FOR (ch, 'a', <= 'z') {
        regs[ch] = "0";
    }

    int next_input = 1;

    int line_no = 1;
    for (auto l : lines) {
        if (l == "STOP") {
            break;
        }
        printf("// line %d\n%s\n", line_no++, l.c_str());
        
        if (l[0] == ':') {
        continue;
            auto reg = l[1];
            assert(l.substr(2, 3) == " = ");
            regs[reg] = l.substr(5);
            continue;
        }
        auto ls = split(l, " ");
        auto opcode = ls[0];
        assert(~ls[1] == 1);
        char reg = ls[1][0];
        if (~ls == 2) {
            assert(opcode == "inp");
            regs[reg] = "i" + to_string(next_input);
            printf(":%c = %s\n", reg, regs[reg].c_str());
            ++next_input;
            continue;
        }

        assert(~ls == 3);
        auto sec = ls[2];
        if (~sec == 1 && isalpha(sec[0])) {
            sec = regs[sec[0]];
        }

        if (opcode == "mul") {
            if (sec == "0") {
                regs[reg] = "0";
            } else if (sec == "1") {
                //
            } else if (regs[reg] == "0") {
                //
            } else if (regs[reg] == "1") {
                regs[reg] = sec;
            } else {
                auto a = try_number(regs[reg]);
                auto b = try_number(sec);
                if (a && b) {
                    regs[reg] = to_string(*a * *b);
                } else {
                    regs[reg] = paren(regs[reg]) + " * " + paren(sec);
                }
            }
            print(regs, reg);
        } else if (opcode == "add") {
            if (sec == "0") {
                //
            } else if (regs[reg] == "0") {
                regs[reg] = sec;
            } else {
                auto a = try_number(regs[reg]);
                auto b = try_number(sec);
                if (a && b) {
                    regs[reg] = to_string(*a + *b);
                } else {
                    regs[reg] = paren(regs[reg]) + " + " + paren(sec);
                }
            }
            print(regs, reg);
        } else if (opcode == "mod") {
            if (regs[reg] == "0") {
                //
            } else {
                auto a = try_number(regs[reg]);
                auto b = try_number(sec);
                if (a && b) {
                    regs[reg] = to_string(*a % *b);
                } else {
                    regs[reg] = paren(regs[reg]) + " % " + paren(sec);
                }
            }
            print(regs, reg);
        } else if (opcode == "div") {
            if (sec == "1") {
                //
            } else {
                auto a = try_number(regs[reg]);
                auto b = try_number(sec);
                if (a && b) {
                    regs[reg] = to_string(*a / *b);
                } else {
                    regs[reg] = paren(regs[reg]) + " / " + paren(sec);
                }
            }
            print(regs, reg);
        } else if (opcode == "eql") {
            static int next_cond_id = 0;
            if (regs[reg] == sec) {
                regs[reg] = "1";
            } else if (~regs[reg]>=2&&regs[reg][0]=='c'&&sec=="0"){
                regs[reg]="!"+regs[reg];
            }else{
                string condname = "c" + to_string(next_cond_id++);
                printf("%s = %s == %s\n",condname.c_str(), paren(regs[reg]).c_str(),paren(sec).c_str());
                regs[reg] = condname;
            }
            print(regs, reg);
        } else {
            assert(false);
        }
        if (line_no > 1) {
            printf("");
        }
    }
    // assert(next_input == 15);
    return 0;
}

void randomize()
{
    string input(14, '9');
    default_random_engine dre;
    uniform_int_distribution<> uid(1, 9);
    for (;;) {
        for (auto& c : input) {
            c = (char)(uid(dre) + '0');
        }
        auto z = compiled(input);
        assert(z != 0);
    }
}


void solve_c(){
int64_t i1=0,i2=0,i3=0,i4=0,i5=0,i6=0,i7=0,i8=0,i9=0,i10=0,i11=0,i12=0,i13=0,i14=0;
bool c0=0,c1=0,c2=0,c3=0,c4=0,c5=0,c6=0,c7=0,c8=0,c9=0,c10=0,c11=0,c12=0,c13=0;
int64_t z = ((((((((((((((((((((((((((((((((((i1 + 4) * !c0) * ((25 * !c1) + 1)) + ((i2 + 10) * !c1)) * ((25 * !c2) + 1)) + ((i3 + 12) * !c2)) / 26) * ((25 * !c3) + 1)) + ((i4 + 14) * !c3)) * ((25 * !c4) + 1)) + ((i5 + 6) * !c4)) * ((25 * !c5) + 1)) + ((i6 + 16) * !c5)) / 26) * ((25 * !c6) + 1)) + ((i7 + 1) * !c6)) * ((25 * !c7) + 1)) + ((i8 + 7) * !c7)) * ((25 * !c8) + 1)) + ((i9 + 8) * !c8)) / 26) * ((25 * !c9) + 1)) + ((i10 + 11) * !c9)) / 26) * ((25 * !c10) + 1)) + ((i11 + 8) * !c10)) / 26) * ((25 * !c11) + 1)) + ((i12 + 3) * !c11)) / 26) * ((25 * !c12) + 1)) + ((i13 + 1) * !c12)) / 26) * ((25 * !c13) + 1)) + ((i14 + 8) * !c13);
}

int main()
{
    //compile();
   debug();
    //randomize();
    //solve_c();
    return 0;
}
